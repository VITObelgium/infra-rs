# Devenv configuration for building using vcpkg for native dependencies
[tools]
"cargo:cargo-vcpkg" = "latest"
pixi = "latest"
sd = "latest"
fd = { version = "latest", os = ["windows"] }

[tools.rust]
version = "1.89.0"
profile = "minimal"
targets = "wasm32-unknown-unknown{% if os() == 'macos' %},x86_64-apple-darwin{% endif %}"

[vars]
build_target = """
  {%- if os() == "macos" and arch() == "arm64" -%}aarch64-apple-darwin
  {%- elif os() == "macos" and arch() == "x64" -%}x86_64-apple-darwin
  {%- elif os() == "linux" and arch() == "x64" -%}x86_64-unknown-linux-gnu
  {%- elif os() == "windows" and arch() == "x64" -%}x86_64-pc-windows-msvc
  {%- else -%}unsupported
  {%- endif -%}
"""
default_triplet = """
  {%- if os() == "macos" and arch() == "arm64" -%}arm64-osx-release
  {%- elif os() == "macos" and arch() == "x64" -%}x64-osx-release
  {%- elif os() == "linux" and arch() == "x64" -%}x64-linux-release
  {%- elif os() == "windows" and arch() == "x64" -%}x64-windows-static-release
  {%- else -%}unsupported
  {%- endif -%}
"""
python_exe = """
  {%- if os() == "windows"-%}python.exe
  {%- else -%}bin/python3
  {%- endif -%}
"""

[env]
CONDA_ENV = false
VCPKG_ROOT = '{{config_root}}/target/vcpkg'
VCPKG_OVERLAY_PORTS = '{{config_root}}/vcpkg-overlay/ports'
VCPKG_FORCE_DOWNLOADED_BINARIES = '1'
VCPKG_DEFAULT_HOST_TRIPLET = '{{vars.default_triplet}}'

# gdal-sys uses pkg-config to find the gdal library
# the gdal.pc file contains shlwapi as link flag for the shlwapi library but this gets ignored
# by the pkg-config crate implementation, so we need to replace it with a format (post_bootstrap) that is picked up by the crate
# Warning: gdal fails to build when zstd is enabled and the CONDA_ENV enrironment variable is set
[tasks.bootstrap]
description = 'Vcpkg build'
depends_post = ["post_bootstrap"]
run = [
    "echo Setting up cargo vcpkg config...",
    """
        {% set triplet_opt = option(name="triplet") | default(value="") %}
        {% set triplet = vars.default_triplet %}
        {% if triplet_opt != "" %}
            {% set triplet = triplet_opt %}
        {% endif %}
        echo Bootstrapping vcpkg:{{triplet}} on {{os()}} {{arch()}}... && \
        cp .cargo/config.toml.in .cargo/config.vcpkg.toml && \
        mise exec -E vcpkg -- sd @CARGO_VCPKG_TRIPLET@ {{triplet}} .cargo/config.vcpkg.toml && \
        mise exec -E vcpkg -- sd @CARGO_VCPKG_HOST_TRIPLET@ {{env.VCPKG_DEFAULT_HOST_TRIPLET}} .cargo/config.vcpkg.toml && \
        mise exec -E vcpkg -- sd @PYTHON_EXE@ {{vars.python_exe}} .cargo/config.vcpkg.toml
    """,
    'mise exec -E vcpkg -- sd @WORKSPACE_ROOT@ {{config_root | replace(from="\", to="/")}} .cargo/config.vcpkg.toml',
    """
        {% set tgt = option(name="target") | default(value="") %}
        echo Vcpkg build for target {{tgt}}... && \
        cargo vcpkg -v build \
        {% if tgt != "" %}--target {{ tgt }}{% endif %}
    """,
]

[tasks.post_bootstrap]
description = 'Bootstrap the vcpkg dependencies'
hide = true
# in a seperate bat file because mise messess up the quoting of the fd arguments
run_windows = [
    'cmd /c {{config_root}}/.config/vcpkg_win_tweaks.bat'
]

[tasks.bootstrap_py]
description = 'Bootstrap the python environment'
run = [
    'echo Bootstrapping python environment...',
    'pixi install'
]

[tasks.build]
description = 'Build the workspace with vcpkg dependencies'
run = [
    'echo Building the workspace with vcpkg...',
    """
        {% set tgt = option(name="target") | default(value="") %}
        cargo build \
            --config .cargo/config.vcpkg.toml \
            {% if tgt != "" %}--target {{ tgt }}{% endif %} \
            {% if flag(name='release') == "true" %}--release{% endif %} \
            {% if flag(name='workspace') == "true" %}--workspace{% endif %} \
            --no-default-features \
            --features gdal-static,serde,derive,raster-io-geotiff,vector-io,rayon
    """
]

[tasks.build_ci]
description = 'Build the workspace with vcpkg dependencies'
run = [
    'echo Building the workspace with vcpkg...',
    """
        {% set tgt = option(name="target") | default(value="") %}
        cargo build --workspace \
            --config .cargo/config.vcpkg.toml \
            {% if tgt != "" %}--target {{ tgt }}{% endif %} \
            {% if flag(name='release') == "true" %}--release{% endif %} \
            --no-default-features \
            --features gdal-static,serde,derive,raster-io-geotiff,vector-io,rayon
    """
]

[tasks.test]
description = 'Run the unit tests with vcpkg dependencies'
run = [
    """
        {% set tgt = option(name="target") | default(value="") %}
        cargo nextest run --config .cargo/config.vcpkg.toml \
            {% if flag(name='release') == "true" %}--release{% endif %} \
            {% if tgt != "" %}--target {{ tgt }}{% endif %} \
            --no-default-features --features=gdal-static,serde,derive,raster-io-geotiff,vector-io,polars,rayon
    """
]

[tasks.test_ci]
description = 'Run the unit tests in the ci environment'
run = [
    """
        {% set tgt = option(name="target") | default(value="") %}
        cargo nextest run --profile ci --config .cargo/config.vcpkg.toml \
            {% if tgt != "" %}--target {{ tgt }}{% endif %} \
            {% if flag(name='release') == "true" %}--release{% endif %} \
            --no-default-features --features=gdal-static,serde,derive,raster-io-geotiff,vector-io,polars,rayon
    """
]

[tasks.test_integration]
description = 'Run the unit tests in the ci environment'
run = [
    """
        {% set tgt = option(name="target") | default(value="") %}
        cargo nextest run --profile integration --config .cargo/config.vcpkg.toml \
            {% if tgt != "" %}--target {{ tgt }}{% endif %} \
            {% if flag(name='release') == "true" %}--release{% endif %} \
            --no-capture \
            --no-default-features --features=serde,gdal,gdal-static,derive,vector-processing,vector-io-xlsx,vector-io-csv,polars,rayon,proj4rs
    """
]

[tasks.test_py]
description = 'Run the unit tests with vcpkg dependencies and python interop'
depends = ['bootstrap_py']
run = [
    "pixi run test_release"
]

[tasks.doc]
description = 'Generate the documentation'
env.RUSTDOCFLAGS = '-D warnings --cfg docsrs'
run = [
    'cargo +nightly doc --workspace --config .cargo/config.vcpkg.toml --exclude=infra-rs --exclude=vector_derive --no-deps --all-features',
]
