name: Build

on: [push]

jobs:
  compile:
    name: ${{ matrix.cfg.id }}
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - {
              id: linux,
              os: ubuntu-latest,
              triplet: x64-linux-release,
              target: x86_64-unknown-linux-gnu,
            }
          - {
              id: windows,
              os: windows-2025,
              triplet: x64-windows-static-release,
              target: x86_64-pc-windows-msvc,
            }
          - {
              id: mac-arm,
              os: macos-latest,
              triplet: arm64-osx-release,
              target: aarch64-apple-darwin,
            }
          - {
              id: mac-intel,
              os: macos-latest,
              triplet: x64-osx-release,
              target: x86_64-apple-darwin,
            }

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable,nightly
          target: ${{ matrix.cfg.target }}
      - uses: prefix-dev/setup-pixi@v0.8.8
        if: matrix.cfg.id != 'mac-intel'
      - uses: taiki-e/install-action@v2
        with:
          tool: just,sd,fd-find,cargo-vcpkg,cargo-nextest
      - name: Cache vcpkg packages
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/vcpkg
            ~/AppData/Local/vcpkg/archives
          key: ${{ matrix.cfg.os }}-${{ hashFiles('Cargo.toml') }}
      - name: Build the C++ dependencies using vcpkg
        run: just bootstrap ${{ matrix.cfg.triplet }} ${{ matrix.cfg.target }}
      - name: Install the python environment with pixi
        if: matrix.cfg.id != 'mac-intel'
        run: just pybootstrap
      - name: Build the project
        run: just build ${{ matrix.cfg.target }}
      - name: Run the unit tests
        run: just test_ci ${{ matrix.cfg.target }}
      - name: Run the unit tests with python feature enabled
        if: matrix.cfg.id != 'mac-intel'
        run: just test_release_py
      - name: Run the unit tests with simd feature enabled
        run: just test_simd ${{ matrix.cfg.target }}
      - name: Build the docs
        run: just doc
      - name: Archive build logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.cfg.id }}-build-logs
          path: |
            target/vcpkg/buildtrees/**/autoconf*.log
            target/vcpkg/buildtrees/**/config*.log
            target/vcpkg/buildtrees/**/build*.log
            target/vcpkg/buildtrees/**/install*.log
            target/vcpkg/buildtrees/**/package*.log
